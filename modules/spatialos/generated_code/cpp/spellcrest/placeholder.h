// Generated by SpatialOS codegen. DO NOT EDIT!
// source: spellcrest/placeholder.schema
#ifndef SPATIALOS_SCHEMA_spellcrest_placeholder_schema_2363528555745219841_INCLUDED
#define SPATIALOS_SCHEMA_spellcrest_placeholder_schema_2363528555745219841_INCLUDED
#include <improbable/collections.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>

#ifndef IMPROBABLE_DLL_API
#define IMPROBABLE_DLL_API
#endif  // IMPROBABLE_DLL_API

namespace spellcrest {

// Forward declarations.
//----------------------------------------------------------------

class DummyCommandRequest;
class DummyCommandResponse;
class DummyData;
class SpellCrestPlaceholderData;

namespace detail {
struct IMPROBABLE_DLL_API GenericCommandObject_SpellCrestPlaceholder {
  std::uint32_t CommandId;
  ::worker::Variant<
      ::spellcrest::DummyCommandRequest,
      ::spellcrest::DummyCommandResponse> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

} // ::spellcrest

namespace std {
template <>
struct IMPROBABLE_DLL_API hash< ::spellcrest::DummyCommandRequest > {
  size_t operator()(const ::spellcrest::DummyCommandRequest& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::spellcrest::DummyCommandResponse > {
  size_t operator()(const ::spellcrest::DummyCommandResponse& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::spellcrest::DummyData > {
  size_t operator()(const ::spellcrest::DummyData& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::spellcrest::SpellCrestPlaceholderData > {
  size_t operator()(const ::spellcrest::SpellCrestPlaceholderData& value) const;
};

} // ::std

namespace spellcrest {

// Data classes.
//----------------------------------------------------------------

class IMPROBABLE_DLL_API DummyCommandRequest {
public:
  // Main constructor.
  DummyCommandRequest(const std::string& req);
  // Creates a new instance with default values for each field.
  DummyCommandRequest();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static DummyCommandRequest Create() { return {}; }

  // Copyable and moveable.
  DummyCommandRequest(DummyCommandRequest&&) = default;
  DummyCommandRequest(const DummyCommandRequest&) = default;
  DummyCommandRequest& operator=(DummyCommandRequest&&) = default;
  DummyCommandRequest& operator=(const DummyCommandRequest&) = default;
  ~DummyCommandRequest() = default;

  bool operator==(const DummyCommandRequest&) const;
  bool operator!=(const DummyCommandRequest&) const;

  // Field req = 1.
  const std::string& req() const;
  std::string& req();
  DummyCommandRequest& set_req(const std::string&);

private:
  std::string _req;
};

class IMPROBABLE_DLL_API DummyCommandResponse {
public:
  // Main constructor.
  DummyCommandResponse(const std::string& resp);
  // Creates a new instance with default values for each field.
  DummyCommandResponse();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static DummyCommandResponse Create() { return {}; }

  // Copyable and moveable.
  DummyCommandResponse(DummyCommandResponse&&) = default;
  DummyCommandResponse(const DummyCommandResponse&) = default;
  DummyCommandResponse& operator=(DummyCommandResponse&&) = default;
  DummyCommandResponse& operator=(const DummyCommandResponse&) = default;
  ~DummyCommandResponse() = default;

  bool operator==(const DummyCommandResponse&) const;
  bool operator!=(const DummyCommandResponse&) const;

  // Field resp = 1.
  const std::string& resp() const;
  std::string& resp();
  DummyCommandResponse& set_resp(const std::string&);

private:
  std::string _resp;
};

class IMPROBABLE_DLL_API DummyData {
public:
  // Main constructor.
  DummyData(const std::string& text);
  // Creates a new instance with default values for each field.
  DummyData();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static DummyData Create() { return {}; }

  // Copyable and moveable.
  DummyData(DummyData&&) = default;
  DummyData(const DummyData&) = default;
  DummyData& operator=(DummyData&&) = default;
  DummyData& operator=(const DummyData&) = default;
  ~DummyData() = default;

  bool operator==(const DummyData&) const;
  bool operator!=(const DummyData&) const;

  // Field text = 1.
  const std::string& text() const;
  std::string& text();
  DummyData& set_text(const std::string&);

private:
  std::string _text;
};

class IMPROBABLE_DLL_API SpellCrestPlaceholderData {
public:
  // Main constructor.
  SpellCrestPlaceholderData(const ::spellcrest::DummyData& data);
  // Creates a new instance with default values for each field.
  SpellCrestPlaceholderData();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static SpellCrestPlaceholderData Create() { return {}; }

  // Copyable and moveable.
  SpellCrestPlaceholderData(SpellCrestPlaceholderData&&) = default;
  SpellCrestPlaceholderData(const SpellCrestPlaceholderData&) = default;
  SpellCrestPlaceholderData& operator=(SpellCrestPlaceholderData&&) = default;
  SpellCrestPlaceholderData& operator=(const SpellCrestPlaceholderData&) = default;
  ~SpellCrestPlaceholderData() = default;

  bool operator==(const SpellCrestPlaceholderData&) const;
  bool operator!=(const SpellCrestPlaceholderData&) const;

  // Field data = 1.
  const ::spellcrest::DummyData& data() const;
  ::spellcrest::DummyData& data();
  SpellCrestPlaceholderData& set_data(const ::spellcrest::DummyData&);

private:
  ::spellcrest::DummyData _data;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::spellcrest::SpellCrestPlaceholder;
 *
 *   SpellCrestPlaceholder::Update update;
 *   connection.SendComponentUpdate< SpellCrestPlaceholder >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< SpellCrestPlaceholder >(
 *       [&](const worker::ComponentUpdateOp< SpellCrestPlaceholder >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         SpellCrestPlaceholder::Update update = op.GetUpdate();
 *       });
 *
 *   SpellCrestPlaceholder::Data data = entity.Get< SpellCrestPlaceholder >();
 */
struct IMPROBABLE_DLL_API SpellCrestPlaceholder : ::worker::detail::ComponentMetaclass {
  static constexpr const ::worker::ComponentId ComponentId = 2001;
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable& Vtable();
  using Data = ::spellcrest::SpellCrestPlaceholderData;
  using GenericCommandObject = ::spellcrest::detail::GenericCommandObject_SpellCrestPlaceholder;

  class IMPROBABLE_DLL_API Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::spellcrest::SpellCrestPlaceholderData object. */
    static Update FromInitialData(const ::spellcrest::SpellCrestPlaceholderData& data);

    /**
     * Converts to a ::spellcrest::SpellCrestPlaceholderData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::spellcrest::SpellCrestPlaceholderData ToInitialData() const;

    /**
     * Replaces fields in the given ::spellcrest::SpellCrestPlaceholderData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::spellcrest::SpellCrestPlaceholderData&) const;

    // Field data = 1.
    const ::worker::Option< ::spellcrest::DummyData >& data() const;
    ::worker::Option< ::spellcrest::DummyData >& data();
    Update& set_data(const ::spellcrest::DummyData&);

  private:
    ::worker::Option< ::spellcrest::DummyData > _data;
  };

  /**
   * Command metaclasses for the SpellCrestPlaceholder component.
   * Each metaclass can be supplied as the template parameter to all command-related templated
   * types and methods in the C++ worker API.
  */
  class IMPROBABLE_DLL_API Commands {
  public:
    class TestCommand {
    public:
      static constexpr const std::uint32_t CommandId = 1;
      using ComponentMetaclass = ::spellcrest::SpellCrestPlaceholder;
      using Request = ::spellcrest::DummyCommandRequest;
      using Response = ::spellcrest::DummyCommandResponse;
    };
  };
};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Write_DummyCommandRequest(const ::spellcrest::DummyCommandRequest&, ::worker::detail::internal::Pbio_Object*);

::spellcrest::DummyCommandRequest Read_DummyCommandRequest(::worker::detail::internal::Pbio_Object*);

void Write_DummyCommandResponse(const ::spellcrest::DummyCommandResponse&, ::worker::detail::internal::Pbio_Object*);

::spellcrest::DummyCommandResponse Read_DummyCommandResponse(::worker::detail::internal::Pbio_Object*);

void Write_DummyData(const ::spellcrest::DummyData&, ::worker::detail::internal::Pbio_Object*);

::spellcrest::DummyData Read_DummyData(::worker::detail::internal::Pbio_Object*);

void Write_SpellCrestPlaceholderData(const ::spellcrest::SpellCrestPlaceholderData&, ::worker::detail::internal::Pbio_Object*);

::spellcrest::SpellCrestPlaceholderData Read_SpellCrestPlaceholderData(::worker::detail::internal::Pbio_Object*);

}  // ::detail
}  // ::spellcrest

#endif  // SPATIALOS_SCHEMA_spellcrest_placeholder_schema_2363528555745219841_INCLUDED
