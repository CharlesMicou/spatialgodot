// Generated by SpatialOS codegen. DO NOT EDIT!
// source: spellcrest/placeholder.schema
#include "spellcrest/placeholder.h"

namespace spellcrest {

// Serialization helpers.
//----------------------------------------------------------------

namespace detail {

void Write_DummyCommandRequest(
    const ::spellcrest::DummyCommandRequest& data, ::worker::detail::internal::Pbio_Object* object) {
  ::worker::detail::internal::Pbio_AddBytes(object, 1, reinterpret_cast<const std::uint8_t*>(data.req().data()), static_cast<std::uint32_t>(data.req().size()));
}

::spellcrest::DummyCommandRequest Read_DummyCommandRequest(::worker::detail::internal::Pbio_Object* object) {
  auto _req = [object] { auto _buffer = reinterpret_cast<const char*>(::worker::detail::internal::Pbio_GetBytes(object, 1)); return std::string{_buffer, _buffer + ::worker::detail::internal::Pbio_GetBytesLength(object, 1)}; }();
  return {
      std::move(_req)};
}

void Write_DummyCommandResponse(
    const ::spellcrest::DummyCommandResponse& data, ::worker::detail::internal::Pbio_Object* object) {
  ::worker::detail::internal::Pbio_AddBytes(object, 1, reinterpret_cast<const std::uint8_t*>(data.resp().data()), static_cast<std::uint32_t>(data.resp().size()));
}

::spellcrest::DummyCommandResponse Read_DummyCommandResponse(::worker::detail::internal::Pbio_Object* object) {
  auto _resp = [object] { auto _buffer = reinterpret_cast<const char*>(::worker::detail::internal::Pbio_GetBytes(object, 1)); return std::string{_buffer, _buffer + ::worker::detail::internal::Pbio_GetBytesLength(object, 1)}; }();
  return {
      std::move(_resp)};
}

void Write_DummyData(
    const ::spellcrest::DummyData& data, ::worker::detail::internal::Pbio_Object* object) {
  ::worker::detail::internal::Pbio_AddBytes(object, 1, reinterpret_cast<const std::uint8_t*>(data.text().data()), static_cast<std::uint32_t>(data.text().size()));
}

::spellcrest::DummyData Read_DummyData(::worker::detail::internal::Pbio_Object* object) {
  auto _text = [object] { auto _buffer = reinterpret_cast<const char*>(::worker::detail::internal::Pbio_GetBytes(object, 1)); return std::string{_buffer, _buffer + ::worker::detail::internal::Pbio_GetBytesLength(object, 1)}; }();
  return {
      std::move(_text)};
}

void Write_SpellCrestPlaceholderData(
    const ::spellcrest::SpellCrestPlaceholderData& data, ::worker::detail::internal::Pbio_Object* object) {
  ::spellcrest::detail::Write_DummyData(data.data(), ::worker::detail::internal::Pbio_AddObject(object, 1));
}

::spellcrest::SpellCrestPlaceholderData Read_SpellCrestPlaceholderData(::worker::detail::internal::Pbio_Object* object) {
  auto _data = ::spellcrest::detail::Read_DummyData(::worker::detail::internal::Pbio_GetObject(object, 1));
  return {
      std::move(_data)};
}

namespace {

void VtableFree_SpellCrestPlaceholder(
    ::worker::ComponentId, void*, std::uint8_t handle_type,
    void* internal_handle) {
  auto* handle = reinterpret_cast< ::worker::detail::ClientHandleBase* >(internal_handle);
  if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_UPDATE) {
    ::worker::detail::ClientHandle< ::spellcrest::SpellCrestPlaceholder::Update >::free(handle);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_SNAPSHOT) {
    ::worker::detail::ClientHandle< ::spellcrest::SpellCrestPlaceholderData >::free(handle);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_REQUEST ||
             handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_RESPONSE) {
    ::worker::detail::ClientHandle< GenericCommandObject_SpellCrestPlaceholder >::free(handle);
  }
}

void* VtableCopy_SpellCrestPlaceholder(
    ::worker::ComponentId, void*, std::uint8_t handle_type, const void* internal_handle) {
  auto* handle = reinterpret_cast< ::worker::detail::ClientHandleBase* >(const_cast<void*>(internal_handle));
  if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_UPDATE) {
    return ::worker::detail::ClientHandle< ::spellcrest::SpellCrestPlaceholder::Update >::new_copy(handle);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_SNAPSHOT) {
    return ::worker::detail::ClientHandle< ::spellcrest::SpellCrestPlaceholderData >::new_copy(handle);
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_REQUEST ||
             handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_RESPONSE) {
    return ::worker::detail::ClientHandle<
        GenericCommandObject_SpellCrestPlaceholder >::new_copy(handle);
  }
  return nullptr;
}

std::uint8_t VtableDeserialize_SpellCrestPlaceholder(
    ::worker::ComponentId, void*, std::uint8_t handle_type,
    ::worker::detail::internal::Pbio_Object* root, void** internal_handle_out) {
  auto** handle_out = reinterpret_cast< ::worker::detail::ClientHandleBase** >(internal_handle_out);
  *handle_out = nullptr;
  if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_UPDATE) {
    *handle_out = ::worker::detail::ClientHandle< ::spellcrest::SpellCrestPlaceholder::Update >::allocate();
    auto* object =
       &::worker::detail::ClientHandle< ::spellcrest::SpellCrestPlaceholder::Update >::get_mutable(*handle_out);
    {
      std::vector<std::uint32_t> fields_to_clear_vector;
      fields_to_clear_vector.insert(
          fields_to_clear_vector.end(),
          ::worker::detail::internal::Pbio_GetUint32Count(root, /* fields to clear */ 1), 0);
      ::worker::detail::internal::Pbio_GetUint32List(
         root, /* fields to clear */ 1, fields_to_clear_vector.data());
      std::set<std::uint32_t> fields_to_clear{fields_to_clear_vector.begin(),
                                              fields_to_clear_vector.end()};
      auto state_object = ::worker::detail::internal::Pbio_GetObject(
          ::worker::detail::internal::Pbio_GetObject(root, /* entity_state */ 2), 2001);
      if (::worker::detail::internal::Pbio_GetObjectCount(state_object, 1)) {
        auto _data = ::spellcrest::detail::Read_DummyData(::worker::detail::internal::Pbio_GetObject(state_object, 1));
        object->data().emplace(std::move(_data));
      }
    }
    {
    }
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_SNAPSHOT) {
    *handle_out = ::worker::detail::ClientHandle< ::spellcrest::SpellCrestPlaceholderData >::allocate(::spellcrest::detail::Read_SpellCrestPlaceholderData(::worker::detail::internal::Pbio_GetObject(root, 2001)));
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_REQUEST) {
    auto command_object = ::worker::detail::internal::Pbio_GetObject(root, 2001);
    if (::worker::detail::internal::Pbio_GetObjectCount(command_object, 1)) {
      *handle_out = ::worker::detail::ClientHandle< ::spellcrest::detail::GenericCommandObject_SpellCrestPlaceholder >::allocate(
        ::spellcrest::SpellCrestPlaceholder::Commands::TestCommand::CommandId,
        ::spellcrest::detail::Read_DummyCommandRequest(::worker::detail::internal::Pbio_GetObject(command_object, 1)));
    }
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_RESPONSE) {
    auto command_object = ::worker::detail::internal::Pbio_GetObject(root, 2001);
    if (::worker::detail::internal::Pbio_GetObjectCount(command_object, 2)) {
      *handle_out = ::worker::detail::ClientHandle< ::spellcrest::detail::GenericCommandObject_SpellCrestPlaceholder >::allocate(
        ::spellcrest::SpellCrestPlaceholder::Commands::TestCommand::CommandId,
        ::spellcrest::detail::Read_DummyCommandResponse(::worker::detail::internal::Pbio_GetObject(command_object, 2)));
    }
  }
  return true;
}

void VtableSerialize_SpellCrestPlaceholder(
    ::worker::ComponentId, void*, std::uint8_t handle_type,
    void* internal_handle, ::worker::detail::internal::Pbio_Object* root) {
  const auto* handle = reinterpret_cast< ::worker::detail::ClientHandleBase* >(internal_handle);
  static_cast<void>(handle);
  if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_UPDATE) {
    const auto& data = ::worker::detail::ClientHandle< ::spellcrest::SpellCrestPlaceholder::Update >::get(handle);
    {
      auto state_object = ::worker::detail::internal::Pbio_AddObject(
          ::worker::detail::internal::Pbio_AddObject(root, /* entity_state */ 2), 2001);
      if (data.data()) {
        ::spellcrest::detail::Write_DummyData((*data.data()), ::worker::detail::internal::Pbio_AddObject(state_object, 1));
      }
    }
    {
    }
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_SNAPSHOT) {
    ::spellcrest::detail::Write_SpellCrestPlaceholderData(
        ::worker::detail::ClientHandle< ::spellcrest::SpellCrestPlaceholderData >::get(handle),
        ::worker::detail::internal::Pbio_AddObject(root, 2001));
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_REQUEST) {
    const auto& data = ::worker::detail::ClientHandle< GenericCommandObject_SpellCrestPlaceholder >::get(handle);
    auto command_object = ::worker::detail::internal::Pbio_AddObject(root, 2001);
    if (data.CommandId == ::spellcrest::SpellCrestPlaceholder::Commands::TestCommand::CommandId) {
      ::spellcrest::detail::Write_DummyCommandRequest(*data.CommandObject.data< ::spellcrest::DummyCommandRequest >(), ::worker::detail::internal::Pbio_AddObject(command_object, 1));
    }
  } else if (handle_type == ::worker::detail::internal::WORKER_PROTOCOL_CLIENT_HANDLE_TYPE_RESPONSE) {
    const auto& data = ::worker::detail::ClientHandle< GenericCommandObject_SpellCrestPlaceholder >::get(handle);
    auto command_object = ::worker::detail::internal::Pbio_AddObject(root, 2001);
    if (data.CommandId == ::spellcrest::SpellCrestPlaceholder::Commands::TestCommand::CommandId) {
      ::spellcrest::detail::Write_DummyCommandResponse(*data.CommandObject.data< ::spellcrest::DummyCommandResponse >(), ::worker::detail::internal::Pbio_AddObject(command_object, 2));
    }
  }
}

}  // anonymous namespace

}  // ::detail

// Implementation of DummyCommandRequest.
//----------------------------------------------------------------

DummyCommandRequest::DummyCommandRequest(const std::string& req)
: _req{req} {}

DummyCommandRequest::DummyCommandRequest() {}

bool DummyCommandRequest::operator==(const DummyCommandRequest& value) const {
  return
      _req == value._req;
}

bool DummyCommandRequest::operator!=(const DummyCommandRequest& value) const {
  return !operator==(value);
}

const std::string& DummyCommandRequest::req() const {
  return _req;
}

std::string& DummyCommandRequest::req() {
  return _req;
}

DummyCommandRequest& DummyCommandRequest::set_req(const std::string& value) {
  _req = value;
  return *this;
}

// Implementation of DummyCommandResponse.
//----------------------------------------------------------------

DummyCommandResponse::DummyCommandResponse(const std::string& resp)
: _resp{resp} {}

DummyCommandResponse::DummyCommandResponse() {}

bool DummyCommandResponse::operator==(const DummyCommandResponse& value) const {
  return
      _resp == value._resp;
}

bool DummyCommandResponse::operator!=(const DummyCommandResponse& value) const {
  return !operator==(value);
}

const std::string& DummyCommandResponse::resp() const {
  return _resp;
}

std::string& DummyCommandResponse::resp() {
  return _resp;
}

DummyCommandResponse& DummyCommandResponse::set_resp(const std::string& value) {
  _resp = value;
  return *this;
}

// Implementation of DummyData.
//----------------------------------------------------------------

DummyData::DummyData(const std::string& text)
: _text{text} {}

DummyData::DummyData() {}

bool DummyData::operator==(const DummyData& value) const {
  return
      _text == value._text;
}

bool DummyData::operator!=(const DummyData& value) const {
  return !operator==(value);
}

const std::string& DummyData::text() const {
  return _text;
}

std::string& DummyData::text() {
  return _text;
}

DummyData& DummyData::set_text(const std::string& value) {
  _text = value;
  return *this;
}

// Implementation of SpellCrestPlaceholderData.
//----------------------------------------------------------------

SpellCrestPlaceholderData::SpellCrestPlaceholderData(const ::spellcrest::DummyData& data)
: _data{data} {}

SpellCrestPlaceholderData::SpellCrestPlaceholderData() {}

bool SpellCrestPlaceholderData::operator==(const SpellCrestPlaceholderData& value) const {
  return
      _data == value._data;
}

bool SpellCrestPlaceholderData::operator!=(const SpellCrestPlaceholderData& value) const {
  return !operator==(value);
}

const ::spellcrest::DummyData& SpellCrestPlaceholderData::data() const {
  return _data;
}

::spellcrest::DummyData& SpellCrestPlaceholderData::data() {
  return _data;
}

SpellCrestPlaceholderData& SpellCrestPlaceholderData::set_data(const ::spellcrest::DummyData& value) {
  _data = value;
  return *this;
}

// Implementation of SpellCrestPlaceholder.
//----------------------------------------------------------------

constexpr const ::worker::ComponentId SpellCrestPlaceholder::ComponentId;

const ::worker::detail::internal::WorkerProtocol_ComponentVtable&
SpellCrestPlaceholder::Vtable() {
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable vtable = {
      2001,
      nullptr,
      &::spellcrest::detail::VtableFree_SpellCrestPlaceholder,
      &::spellcrest::detail::VtableCopy_SpellCrestPlaceholder,
      &::spellcrest::detail::VtableDeserialize_SpellCrestPlaceholder,
      &::spellcrest::detail::VtableSerialize_SpellCrestPlaceholder,
  };
  return vtable;
}

constexpr const std::uint32_t SpellCrestPlaceholder::Commands::TestCommand::CommandId;

bool SpellCrestPlaceholder::Update::operator==(const SpellCrestPlaceholder::Update& value) const {
  return
      _data == value._data;
}

bool SpellCrestPlaceholder::Update::operator!=(const SpellCrestPlaceholder::Update& value) const {
  return !operator==(value);
}

SpellCrestPlaceholder::Update SpellCrestPlaceholder::Update::FromInitialData(const ::spellcrest::SpellCrestPlaceholderData& data) {
  SpellCrestPlaceholder::Update update;
  update._data.emplace(data.data());
  return update;
}

::spellcrest::SpellCrestPlaceholderData SpellCrestPlaceholder::Update::ToInitialData() const {
  return ::spellcrest::SpellCrestPlaceholderData(*_data);
}

void SpellCrestPlaceholder::Update::ApplyTo(::spellcrest::SpellCrestPlaceholderData& data) const {
  if (_data) {
    data.set_data(*_data);
  }
}

const ::worker::Option< ::spellcrest::DummyData >& SpellCrestPlaceholder::Update::data() const {
  return _data;
}

::worker::Option< ::spellcrest::DummyData >& SpellCrestPlaceholder::Update::data() {
  return _data;
}

SpellCrestPlaceholder::Update& SpellCrestPlaceholder::Update::set_data(const ::spellcrest::DummyData& value) {
  _data.emplace(value); return *this;
}

}  // ::spellcrest

std::size_t std::hash< ::spellcrest::DummyCommandRequest >::operator()(const ::spellcrest::DummyCommandRequest& value) const {
  size_t result = 1327;
  result = (result * 977) + std::hash< std::string >{}(value.req());
  return result;
}

std::size_t std::hash< ::spellcrest::DummyCommandResponse >::operator()(const ::spellcrest::DummyCommandResponse& value) const {
  size_t result = 1327;
  result = (result * 977) + std::hash< std::string >{}(value.resp());
  return result;
}

std::size_t std::hash< ::spellcrest::DummyData >::operator()(const ::spellcrest::DummyData& value) const {
  size_t result = 1327;
  result = (result * 977) + std::hash< std::string >{}(value.text());
  return result;
}

std::size_t std::hash< ::spellcrest::SpellCrestPlaceholderData >::operator()(const ::spellcrest::SpellCrestPlaceholderData& value) const {
  size_t result = 1327;
  result = (result * 977) + std::hash< ::spellcrest::DummyData >{}(value.data());
  return result;
}
