// Generated by SpatialOS codegen. DO NOT EDIT!
// source: blank.schema
#ifndef SPATIALOS_SCHEMA_blank_schema_4064253634602469814_INCLUDED
#define SPATIALOS_SCHEMA_blank_schema_4064253634602469814_INCLUDED
#include <improbable/collections.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>

#ifndef IMPROBABLE_DLL_API
#define IMPROBABLE_DLL_API
#endif  // IMPROBABLE_DLL_API

namespace sample {

// Forward declarations.
//----------------------------------------------------------------

class BlankData;

namespace detail {
struct IMPROBABLE_DLL_API GenericCommandObject_Blank {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

} // ::sample

namespace std {
template <>
struct IMPROBABLE_DLL_API hash< ::sample::BlankData > {
  size_t operator()(const ::sample::BlankData& value) const;
};

} // ::std

namespace sample {

// Data classes.
//----------------------------------------------------------------

class IMPROBABLE_DLL_API BlankData {
public:
  // Creates a new instance with default values for each field.
  BlankData();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static BlankData Create() { return {}; }

  // Copyable and moveable.
  BlankData(BlankData&&) = default;
  BlankData(const BlankData&) = default;
  BlankData& operator=(BlankData&&) = default;
  BlankData& operator=(const BlankData&) = default;
  ~BlankData() = default;

  bool operator==(const BlankData&) const;
  bool operator!=(const BlankData&) const;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::sample::Blank;
 *
 *   Blank::Update update;
 *   connection.SendComponentUpdate< Blank >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< Blank >(
 *       [&](const worker::ComponentUpdateOp< Blank >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         Blank::Update update = op.GetUpdate();
 *       });
 *
 *   Blank::Data data = entity.Get< Blank >();
 */
struct IMPROBABLE_DLL_API Blank : ::worker::detail::ComponentMetaclass {
  static constexpr const ::worker::ComponentId ComponentId = 1001;
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable& Vtable();
  using Data = ::sample::BlankData;
  using GenericCommandObject = ::sample::detail::GenericCommandObject_Blank;

  class IMPROBABLE_DLL_API Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::sample::BlankData object. */
    static Update FromInitialData(const ::sample::BlankData& data);

    /**
     * Converts to a ::sample::BlankData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::sample::BlankData ToInitialData() const;

    /**
     * Replaces fields in the given ::sample::BlankData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::sample::BlankData&) const;
  };

};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Write_BlankData(const ::sample::BlankData&, ::worker::detail::internal::Pbio_Object*);

::sample::BlankData Read_BlankData(::worker::detail::internal::Pbio_Object*);

}  // ::detail
}  // ::sample

#endif  // SPATIALOS_SCHEMA_blank_schema_4064253634602469814_INCLUDED
