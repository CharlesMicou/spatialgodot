#!/usr/bin/env python

Import('env')

module_env = env.Clone()

# Godot's setup for what constitutes sources
src_list = [
    "spatial_util.cpp",
    "position_sync.cpp",
    "world_view.cpp",
    "entity_view.cpp",
    "component_view.cpp",
    "spatialos.cpp",
    "register_types.cpp",
    "worker_logger.cpp",
    "worker_logger_wrapper.cpp"]
module_env.add_source_files(env.modules_sources, src_list)

# Schema dependencies
env.Append(CPPPATH="generated_code/cpp")
env.Append(CPPPATH="generated_code/cpp/improbable")
env.Append(CPPPATH="generated_code/cpp/spellcrest")
env.Append(CPPPATH="generated_code/cpp/godotcore")

# Set compiler options as the worker sdk requires c++11
if (not env.msvc):
    module_env.Append(CXXFLAGS=['-O2', '-std=c++11', '-g'])

# Worker SDK dependencies
env.Append(CPPPATH="worker_sdk/cpp/include")
#module_env.Append(CPPPATH="worker_sdk/cpp/include")
env.Append(LIBPATH=["worker_sdk/cpp/lib"])
#module_env.Append(LIBPATH=["worker_sdk/cpp/lib"])
if (not env.msvc):
    env.Append(LIBS=Glob("worker_sdk/cpp/lib/*.a"))
else:
    env.Append(LIBS=Glob("worker_sdk/cpp/lib/*.lib"))
    #module_env.Append(LIBS=Glob("worker_sdk/cpp/lib/*.lib"))
    #env.Append(LIBS=tmp)


# Build schema into a static library
"""improbable_schema = Glob("generated_code/cpp/improbable/*.h", strings=True) + Glob("generated_code/cpp/improbable/*.cc", strings=True)
spellcrest_schema = Glob("generated_code/cpp/spellcrest/*.h", strings=True) + Glob("generated_code/cpp/spellcrest/*.cc", strings=True)
godotcore_schema = Glob("generated_code/cpp/godotcore/*.h", strings=True) + Glob("generated_code/cpp/godotcore/*.cc", strings=True)"""

improbable_schema = Glob("generated_code/cpp/improbable/*.cc", strings=True)
spellcrest_schema = Glob("generated_code/cpp/spellcrest/*.cc", strings=True)
godotcore_schema = Glob("generated_code/cpp/godotcore/*.cc", strings=True)

if (not env.msvc):
    schemaLib = module_env.Library(target='#bin/schema', source=(improbable_schema + spellcrest_schema + godotcore_schema))
    shim = schemaLib[0].name.rsplit('.', 1)[0]
    env.Append(LIBS=[shim])
    env.Append(LIBPATH=['#bin'])
else:
    #lib = module_env.add_library("schema", improbable_schema + spellcrest_schema + godotcore_schema)
    #module_env.Append(LIBS=[lib])
    #module_env.Append(LIBPATH=['schema'])
    lib = env.add_library("schema", improbable_schema + spellcrest_schema + godotcore_schema)
    env.Append(LIBS=[lib])
    env.Append(LIBPATH=['schema'])
    pass

Export('env')